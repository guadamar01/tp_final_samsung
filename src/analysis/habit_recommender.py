"""
habit_recommender.py
--------------------
Genera recomendaciones personalizadas de bienestar alimenticio
seg√∫n el texto del usuario y su estado emocional detectado.
"""

import random

# Diccionario base de respuestas organizadas por sentimiento
RECOMENDACIONES = {
    "positivo": [
        "üëè ¬°Excelente actitud! Segu√≠ as√≠, record√° que la constancia es la clave ü•ó",
        "üí™ Me encanta tu energ√≠a. Aprovech√° para planear una comida balanceada hoy.",
        "üåû Est√°s en un buen momento, no olvides hidratarte bien y disfrutar del proceso."
    ],
    "neutro": [
        "üôÇ Record√° escuchar a tu cuerpo. ¬øTen√©s hambre real o es m√°s por h√°bito?",
        "ü§î Pod√©s aprovechar este momento para elegir algo liviano y nutritivo.",
        "üßò‚Äç‚ôÇÔ∏è Comer despacio y sin distracciones ayuda a conectar con tus sensaciones."
    ],
    "negativo": [
        "üòî Entiendo c√≥mo te sent√≠s. A veces la ansiedad se disfraza de hambre, intent√° respirar profundo antes de comer.",
        "üçµ Cuando sientas ansiedad, prob√° tomar agua o un t√© antes de decidir qu√© comer.",
        "ü´∂ No te castigues por tener un mal d√≠a. Lo importante es volver a elegir bien en la pr√≥xima comida."
    ]
}

# Palabras clave para detectar contextos espec√≠ficos
CONTEXTOS = {
    "ansiedad": "La ansiedad por comer es com√∫n. Trat√° de identificar si tu cuerpo realmente tiene hambre o si busca consuelo. Respir√° profundo antes de decidir.",
    "dulce": "Si te dan ganas de algo dulce, pod√©s optar por frutas o yogures naturales. Son opciones m√°s saludables üçì",
    "hambre": "Comer con hambre real es importante. Eleg√≠ alimentos que te den energ√≠a sostenida: prote√≠nas, frutas, cereales integrales üçé",
    "triste": "Cuando te sientas baj√≥n, trat√° de no refugiarte en la comida. A veces una caminata corta o hablar con alguien puede ayudarte üå±",
    "feliz": "Si est√°s de buen √°nimo, aprovech√° para cocinar algo saludable que te guste mucho. Disfrutar tambi√©n es parte del bienestar üçΩÔ∏è"
}


def detectar_contexto(texto_usuario: str) -> str:
    """
    Detecta si el texto del usuario menciona alguna palabra clave
    asociada a un contexto alimenticio o emocional.
    """
    texto = texto_usuario.lower()
    for palabra, respuesta in CONTEXTOS.items():
        if palabra in texto:
            return respuesta
    return ""


def generar_recomendacion(texto_usuario: str, sentimiento: str) -> str:
    """
    Genera una recomendaci√≥n seg√∫n el sentimiento detectado y el contenido del texto.
    """
    sentimiento = sentimiento.lower()

    # Buscar contexto espec√≠fico (ej: "ansiedad", "dulce", etc.)
    contexto = detectar_contexto(texto_usuario)

    # Elegir recomendaci√≥n base seg√∫n sentimiento
    if "pos" in sentimiento:
        base = random.choice(RECOMENDACIONES["positivo"])
    elif "neg" in sentimiento:
        base = random.choice(RECOMENDACIONES["negativo"])
    else:
        base = random.choice(RECOMENDACIONES["neutro"])

    # Combinar ambas partes si hay contexto detectado
    if contexto:
        return f"{base}\n\nüí° {contexto}"
    else:
        return base


if __name__ == "__main__":
    # Ejemplo de prueba
    ejemplo_texto = "Me siento ansioso por comer algo dulce"
    ejemplo_sentimiento = "negativo"
    print(generar_recomendacion(ejemplo_texto, ejemplo_sentimiento))
